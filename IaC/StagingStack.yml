# aws cloudformation --region us-east-2 create-stack --template-body file://IaC/StagingStack.yml --capabilities CAPABILITY_NAMED_IAM --stack-name pmm-staging --tags Key=iit-billing-tag,Value=pmm-staging --parameters ParameterKey=LambdaName,ParameterValue=email_running_instances ParameterKey=JShortName,ParameterValue=pmm-staging
---
AWSTemplateFormatVersion: 2010-09-09
Parameters:

  LambdaName:
    Default: email_running_instances
    Description: lambda function name
    Type: String
    MinLength: 1
    MaxLength: 64
    AllowedPattern: '^[a-z][a-z0-9\_]*$'
    ConstraintDescription: must begin with a letter and must contain only lowercase letters, numbers, and underscore (_).

  JShortName:
    Default: pmm-staging
    Description: Short name for resources
    Type: String
    MinLength: 1
    MaxLength: 64
    AllowedPattern: '^[a-z][a-z0-9\.\-]*$'
    ConstraintDescription: must begin with a letter and must contain only lowercase letters, numbers, periods (.), and dashes (-).

Resources:

  JVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.178.0.0/22
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Ref JShortName
      - Key: iit-billing-tag
        Value: pmm-staging

  JInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref JShortName
      - Key: iit-billing-tag
        Value: pmm-staging

  JVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref JVPC
      InternetGatewayId: !Ref JInternetGateway

  JSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref JVPC
      CidrBlock: 10.178.0.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: ''
      Tags:
      - Key: Name
        Value: !Join [ '-', [ !Ref JShortName, 'A' ]]
      - Key: iit-billing-tag
        Value: pmm-staging

  JSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref JVPC
      CidrBlock: 10.178.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: ''
      Tags:
      - Key: Name
        Value: !Join [ '-', [ !Ref JShortName, 'B' ]]
      - Key: iit-billing-tag
        Value: pmm-staging

  JSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref JVPC
      CidrBlock: 10.178.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: ''
      Tags:
      - Key: Name
        Value: !Join [ '-', [ !Ref JShortName, 'C' ]]
      - Key: iit-billing-tag
        Value: pmm-staging

  JRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref JVPC
      Tags:
      - Key: Name
        Value: !Ref JShortName
      - Key: iit-billing-tag
        Value: pmm-staging

  JInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref JInternetGateway
      RouteTableId: !Ref JRouteTable

  SubnetARouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref JRouteTable
      SubnetId: !Ref JSubnetA

  SubnetBRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref JRouteTable
      SubnetId: !Ref JSubnetB

  SubnetCRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref JRouteTable
      SubnetId: !Ref JSubnetC

  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: SSH
      GroupDescription: SSH traffic in
      VpcId: !Ref JVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: iit-billing-tag
        Value: pmm-staging

  HTTPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: HTTP
      GroupDescription: HTTP and HTTPS traffic in
      VpcId: !Ref JVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: iit-billing-tag
        Value: pmm-staging

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref LambdaName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
      Path: /
      Policies:
      - PolicyName: !Ref LambdaName
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Resource: '*'
            Action:
            - ec2:DescribeSpotInstanceRequests
            - ec2:DescribeSpotPriceHistory
            - ec2:DescribeInstances
            - ses:SendEmail
          - Effect: Allow
            Resource: 'arn:aws:logs:*:*:*'
            Action:
            - logs:CreateLogStream
            - logs:CreateLogGroup
            - logs:PutLogEvents

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: email owner about running stagging instances
      FunctionName: !Ref LambdaName
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python2.7
      Timeout: 10
      Tags:
      - Key: iit-billing-tag
        Value: pmm-staging
      Code:
        ZipFile: |
            from __future__ import print_function

            import re
            import boto3
            import datetime
            import collections

            def lambda_handler(event, context):
                fullReportEmail = ['mykola.marzhan@percona.com', 'roma.novikov@percona.com']
                region = 'us-east-2'
                session = boto3.Session(region_name=region)
                resources = session.resource('ec2')
                ec2 = session.client('ec2')
                ses = session.client('ses', region_name='us-east-1')

                instances = resources.instances.filter(Filters=[
                    {'Name': 'instance-state-name', 'Values': ['running']},
                    {'Name': 'tag:iit-billing-tag', 'Values': ['pmm-staging']}
                ])

                emails = collections.defaultdict(list)
                for instance in instances:
                    # get instance Owner
                    ownerFilter = filter(lambda x: 'owner' == x['Key'], instance.tags)
                    if len(ownerFilter) >= 1:
                        owner = ownerFilter[0]['Value'] + '@percona.com'
                    else:
                        owner = 'unknown'

                    # get instance Name
                    nameFilter = filter(lambda x: 'Name' == x['Key'], instance.tags)
                    if len(nameFilter) >= 1:
                        name = nameFilter[0]['Value']
                    else:
                        name = instance.id

                    # get instance Uptime
                    current_time = datetime.datetime.now(instance.launch_time.tzinfo)
                    uptime = current_time - instance.launch_time

                    # get price
                    priceHistory = ec2.describe_spot_price_history(
                        InstanceTypes=[instance.instance_type],
                        StartTime=instance.launch_time,
                        EndTime=current_time,
                        AvailabilityZone=instance.placement['AvailabilityZone']
                    )
                    totalCost = 0.0
                    for price in priceHistory['SpotPriceHistory']:
                        totalCost += float(price['SpotPrice'])
                    costStr = '%0.2f USD' % totalCost

                    # prepare table for email
                    if uptime.total_seconds() > 5*60*60:
                        strUptime = re.match('^[^:]+:[^:]+', str(uptime)).group(0)
                        emails[owner].append('<tr><td>' + name + '</td><td>' + owner + '</td><td>' + strUptime + '</td><td>' + costStr + '</td></tr>')
                        for email in fullReportEmail:
                            if owner != email:
                                emails[email].append('<tr><td>' + name + '</td><td>' + owner + '</td><td>' + strUptime + '</td><td>' + costStr + '</td></tr>')
                    else:
                        print('Skip: ' + name)

                for ownerEmail in emails:
                    if ownerEmail == 'unknown':
                        continue

                    body = '''
                      <html>
                        <head></head>
                        <body>
                          <h4>just a friendly reminder - please don't forget to shutdown the following instances:</h4>
                          <table>
                            <tr><th>Name</th><th>Owner</th><th>Uptime</th><th>Total Cost</th></tr>
                            %s
                          </table>
                          <p></p>
                          <p><a href="https://pmm.cd.percona.com/blue/organizations/jenkins/aws-staging-stop/activity">Stop PMM Staging Link</a></p>
                        </body>
                      </html>
                    ''' % ('\n'.join(emails[ownerEmail]))
                    print('To: ' + ownerEmail + body)

                    ses.send_email(
                        Source='lp-percona.script@percona.com',
                        Destination={
                            'ToAddresses': [ownerEmail],
                        },
                        Message={
                            'Body': {
                                'Html': {
                                    'Charset': 'UTF-8',
                                    'Data': body,
                                },
                            },
                            'Subject': {
                                'Charset': 'UTF-8',
                                'Data': 'PMM Staging reminder',
                            },
                        },
                    )

                return 'successful finish'

  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Ref LambdaName
      Description: email owner about running stagging instances
      ScheduleExpression: cron(0 19 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: !Ref LambdaName

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduledRule.Arn

